---
# VOL_PREFIX=/data RECORDING=/logs/fm.sigmf-meta docker compose -f offline.yml up gamutrf
networks:
  gamutrf:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 9000
  default:
    external: true
    name: none
services:
  mqtt:
    restart: no
    image: iqtlabs/edgetech-mqtt-dev:v1.0
    networks:
      - gamutrf
    ports:
      - '1883:1883'
  gamutrf:
    restart: no
    #image: iqtlabs/gamutrf:v0.5.65
    # image: iqtlabs/gamutrf
    # build: /home/ltindall/iqt/gamutRF
    # pull_policy: build
    image: iqtlabs/gamutrf:v0.5.71
    privileged: true
    networks:
      - gamutrf
    ports:
      - '9001:9001'
      - '10000:10000'
      - '10001:10001'
      - '10002:10002'
    cap_add:
      - SYS_NICE
      - SYS_RAWIO
    devices:
      - /dev/bus/usb:/dev/bus/usb
      - /dev/dri/renderD128:/dev/dri/renderD128
    # nvidia container toolkit etc must be installed.
    # Comment out "deploy" if on non-x86 platform (e.g. Pi4)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              # count: 1
              capabilities: [gpu]
    volumes:
      - '${VOL_PREFIX}:/logs'
      - '/tmp/.X11-unix:/tmp/.X11-unix'
    runtime: nvidia
    # cause FFT wisdom to be cached.
    environment:
      - 'HOME=/logs'
      - 'XDG_RUNTIME_DIR=/tmp'
      - 'NVIDIA_DRIVER_CAPABILITIES=all'
      - 'NVIDIA_VISIBLE_DEVICES=all'
      - DISPLAY
    command:
      - gamutrf-offline
      - /logs/data/fm.sigmf-meta
      # - '${RECORDING}'
      - --nfft=1024
      - --tune-step-fft=512
      - --tuneoverlap=1
      - --bucket_range=1
      - --pretune
      - --sample_dir=/logs/samples
      - --write_samples=100000000
      - --iq_inference_model_server=torchserve:8080
      - --iq_inference_model_name=torchsig_model
      - --no-iq_inference_background
      - --no-vkfft
    healthcheck:
      test: [CMD, "/gamutrf/bin/scanhc.sh", "9000"]
      interval: 10s
      timeout: 10s
      retries: 3
